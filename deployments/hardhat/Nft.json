{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "create",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "imageURI",
          "type": "string"
        }
      ],
      "name": "formatTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "name": "svgToImageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x50755ea7000363633d55551e5a82cea6dd4331a84f9c4b6621afcf4867a96de7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "3043120",
    "logsBloom": "0x
    "blockHash": "0x778c2e016f398c073f624712174efa03c801a2536b6d33cd015ccd42ee09117e",
    "transactionHash": "0x50755ea7000363633d55551e5a82cea6dd4331a84f9c4b6621afcf4867a96de7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0x50755ea7000363633d55551e5a82cea6dd4331a84f9c4b6621afcf4867a96de7",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x778c2e016f398c073f624712174efa03c801a2536b6d33cd015ccd42ee09117e"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "3043120",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "7f20f727a8ca06fc303639fbc11d58c5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"}],\"name\":\"formatTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"name\":\"svgToImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/price_nft.sol\":\"Nft\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/price_nft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\n\\nlibrary SwordMaker {\\n    function generateSVGFromPrice(int256 value_pct_change) \\n        external\\n        view\\n        returns (string memory) \\n    {\\n        string memory sword1 = '<svg width=\\\"350\\\" height=\\\"350\\\" viewBox=\\\"0 0 350 350\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><g id=\\\"Frame 1\\\"><g id=\\\"price_sword\\\" clip-path=\\\"url(#clip0_1_3)\\\"><path id=\\\"BladeBase\\\" d=\\\"M136.639 251.991C137.209 251.441 137.614 250.738 137.81 249.969L145.622 218.971C145.973 217.553 145.575 216.054 144.566 215C143.557 213.946 142.07 213.487 140.642 213.787L109.352 220.331C108.573 220.495 107.857 220.872 107.287 221.422L68.6357 255.647C66.9481 257.271 66.8937 259.952 68.5142 261.643L91.9951 286.098C92.7734 286.908 93.8444 287.377 94.9674 287.4C96.0907 287.422 95.6892 286.876 96.4997 286.098L94.9674 287.4L136.639 251.991Z\\\" fill=\\\"#CCD1D9\\\"/><path id=\\\"BladeEdge\\\" opacity=\\\"0.2\\\" d=\\\"M144.444 215.122C143.434 214.067 141.948 213.609 140.519 213.909L109.23 220.453C108.451 220.617 107.735 220.994 107.165 221.544L68.6357 255.647C66.948 257.271 66.8937 259.952 68.5142 261.643L91.995 286.098C92.7734 286.908 93.8444 287.377 94.9673 287.4C96.0907 287.422 97.1766 286.997 97.9872 286.219L136.517 252.113C137.087 251.563 137.492 250.86 137.688 250.091L145.5 219.093C145.851 217.674 145.453 216.176 144.444 215.122ZM141.385 218.056L133.58 249.055L95.0532 283.161L71.5696 258.705L110.096 224.603L141.385 218.056Z\\\" fill=\\\"white\\\"/><path id=\\\"BladeFuller\\\" d=\\\"M80.2529 273.87C78.6324 272.179 78.6867 269.498 80.3743 267.874L101.5 249C103.191 247.38 105.872 247.434 107.489 249.121C109.113 250.809 109.059 253.493 107.368 255.114L86.2454 273.991C84.5579 275.609 81.8766 275.555 80.2529 273.87Z\\\" fill=\\\"#AAB2BC\\\"/><g id=\\\"Hilt\\\"><g id=\\\"HandleDeco\\\"><path id=\\\"Handle\\\" d=\\\"M84.2492 285.94C84.272 284.817 83.847 283.728 83.0686 282.918L71.3268 270.69C69.7063 269 67.0219 268.945 65.3343 270.568L26.4448 307.917C24.7573 309.534 24.703 312.216 26.3234 313.906L38.0653 326.134C39.6859 327.818 42.3699 327.872 44.0574 326.255L82.9469 288.907C83.7578 288.129 84.2265 287.064 84.2492 285.94Z\\\" fill=\\\"#ED5564\\\"/><path id=\\\"Stripe1\\\" d=\\\"M42.6711 292.332L78.6222 293.06L82.9473 288.907C83.7578 288.128 84.2265 287.064 84.2492 285.94C84.2579 285.512 84.2012 285.095 84.0881 284.695L51.3175 284.031L42.6711 292.332Z\\\" fill=\\\"#DA4453\\\"/><path id=\\\"Stripe2\\\" d=\\\"M68.9309 302.37L32.9766 301.641L26.4448 307.917C25.8434 308.494 25.453 309.207 25.2673 309.961L60.2845 310.67L68.9309 302.37Z\\\" fill=\\\"#DA4453\\\"/></g><path id=\\\"CrossGuard\\\" d=\\\"M112.785 295.509L59.9487 240.489C58.3282 238.801 55.6469 238.747 53.9594 240.367L44.7874 249.172C43.0997 250.796 43.0454 253.477 44.666 255.161L97.5017 310.183C98.28 310.993 99.3478 311.462 100.471 311.485C101.598 311.508 102.684 311.082 103.494 310.304L112.663 301.499C114.351 299.881 114.405 297.194 112.785 295.509Z\\\" fill=\\\"#FFCE54\\\"/><path id=\\\"Pommel\\\" d=\\\"M45.2373 324.112C45.329 319.587 43.6524 315.295 40.518 312.027C34.0421 305.283 23.2925 305.065 16.5487 311.541C13.2842 314.679 11.4355 318.901 11.3438 323.425C11.2522 327.95 12.9288 332.243 16.0631 335.511C19.2007 338.778 23.4196 340.627 27.9472 340.719C32.4747 340.81 36.7651 339.134 40.0324 335.996C43.2969 332.859 45.1457 328.636 45.2373 324.112Z\\\" fill=\\\"#FFCE54\\\"/><path id=\\\"HiltDetail\\\" d=\\\"M28.2047 328.006C30.5442 328.053 32.4791 326.194 32.5266 323.853C32.574 321.512 30.7159 319.575 28.3765 319.528C26.037 319.481 24.102 321.34 24.0546 323.681C24.0072 326.022 25.8652 327.958 28.2047 328.006Z\\\" fill=\\\"#F6BB42\\\"/></g></g></g><defs><clipPath id=\\\"clip0_1_3\\\"><rect width=\\\"203.417\\\" height=\\\"203.417\\\" fill=\\\"white\\\" transform=\\\"translate(15.1204 137) rotate(1.16066)\\\"/></clipPath></defs></svg>'; \\n        string memory sword2 = '<svg width=\\\"350\\\" height=\\\"350\\\" viewBox=\\\"0 0 350 350\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><g id=\\\"Frame 1\\\"><g id=\\\"sword-svgrepo-com 1\\\" clip-path=\\\"url(#clip0_1_3)\\\"><path id=\\\"BladeBase\\\" d=\\\"M209.302 179.328C209.872 178.778 210.277 178.075 210.473 177.306L218.285 146.308C218.636 144.89 218.238 143.391 217.229 142.337C216.22 141.283 214.733 140.824 213.305 141.124L182.015 147.668C181.236 147.832 180.52 148.209 179.95 148.759L68.6357 255.647C66.948 257.271 66.8937 259.952 68.5142 261.643L91.9951 286.098C92.7734 286.908 93.8444 287.377 94.9674 287.4C96.0907 287.422 97.1766 286.997 97.9872 286.219L209.302 179.328Z\\\" fill=\\\"#CCD1D9\\\"/><path id=\\\"BladeEdge\\\" opacity=\\\"0.2\\\" d=\\\"M217.229 142.337C216.219 141.283 214.733 140.824 213.304 141.124L182.015 147.668C181.235 147.832 180.52 148.209 179.95 148.759L68.6357 255.647C66.948 257.271 66.8937 259.952 68.5142 261.643L91.9951 286.098C92.7734 286.908 93.8444 287.377 94.9674 287.4C96.0907 287.422 97.1766 286.997 97.9872 286.219L209.302 179.328C209.872 178.778 210.277 178.075 210.473 177.306L218.285 146.308C218.636 144.889 218.238 143.391 217.229 142.337ZM214.17 145.271L206.365 176.27L95.0532 283.161L71.5696 258.705L182.881 151.818L214.17 145.271Z\\\" fill=\\\"white\\\"/><path id=\\\"BladeFuller\\\" d=\\\"M80.2529 273.87C78.6324 272.179 78.6867 269.498 80.3743 267.874L158.688 192.676C160.379 191.056 163.06 191.11 164.677 192.798C166.301 194.485 166.247 197.17 164.556 198.79L86.2454 273.991C84.5579 275.609 81.8766 275.555 80.2529 273.87Z\\\" fill=\\\"#AAB2BC\\\"/><g id=\\\"Hilt\\\"><g id=\\\"HandleDeco\\\"><path id=\\\"Handle\\\" d=\\\"M84.2492 285.94C84.272 284.817 83.847 283.728 83.0686 282.918L71.3268 270.69C69.7063 269 67.0219 268.945 65.3343 270.568L26.4448 307.917C24.7573 309.534 24.703 312.216 26.3234 313.906L38.0653 326.134C39.6859 327.818 42.3699 327.872 44.0574 326.255L82.9469 288.907C83.7578 288.129 84.2265 287.064 84.2492 285.94Z\\\" fill=\\\"#ED5564\\\"/><path id=\\\"Vector\\\" d=\\\"M42.6711 292.332L78.6222 293.06L82.9473 288.907C83.7578 288.128 84.2265 287.064 84.2492 285.94C84.2579 285.512 84.2012 285.095 84.0881 284.695L51.3175 284.031L42.6711 292.332Z\\\" fill=\\\"#DA4453\\\"/><path id=\\\"Vector_2\\\" d=\\\"M68.9309 302.37L32.9766 301.641L26.4448 307.917C25.8434 308.494 25.453 309.207 25.2673 309.961L60.2845 310.67L68.9309 302.37Z\\\" fill=\\\"#DA4453\\\"/></g><path id=\\\"CrossGuard\\\" d=\\\"M112.785 295.509L59.9487 240.489C58.3282 238.801 55.6469 238.747 53.9594 240.367L44.7874 249.172C43.0997 250.796 43.0454 253.477 44.666 255.161L97.5017 310.183C98.28 310.993 99.3478 311.462 100.471 311.485C101.598 311.508 102.684 311.082 103.494 310.304L112.663 301.499C114.351 299.881 114.405 297.194 112.785 295.509Z\\\" fill=\\\"#FFCE54\\\"/><path id=\\\"Pommel\\\" d=\\\"M45.2373 324.112C45.329 319.587 43.6524 315.295 40.518 312.027C34.0421 305.283 23.2925 305.065 16.5487 311.541C13.2842 314.679 11.4355 318.901 11.3438 323.425C11.2522 327.95 12.9288 332.243 16.0631 335.511C19.2007 338.778 23.4196 340.627 27.9472 340.719C32.4747 340.81 36.7651 339.134 40.0324 335.996C43.2969 332.859 45.1457 328.636 45.2373 324.112Z\\\" fill=\\\"#FFCE54\\\"/><path id=\\\"Vector_3\\\" d=\\\"M28.2047 328.006C30.5442 328.053 32.4791 326.194 32.5266 323.853C32.574 321.512 30.7159 319.575 28.3765 319.528C26.037 319.481 24.102 321.34 24.0546 323.681C24.0072 326.022 25.8652 327.958 28.2047 328.006Z\\\" fill=\\\"#F6BB42\\\"/></g></g></g><defs><clipPath id=\\\"clip0_1_3\\\"><rect width=\\\"203.417\\\" height=\\\"203.417\\\" fill=\\\"white\\\" transform=\\\"translate(15.1204 137) rotate(1.16066)\\\"/></clipPath></defs></svg>';\\n        string memory sword3 = '<svg width=\\\"350\\\" height=\\\"350\\\" viewBox=\\\"0 0 350 350\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><g id=\\\"price_sword\\\"><path id=\\\"BladeBase\\\" d=\\\"M315.786 72.8438C316.356 72.2934 316.762 71.5907 316.958 70.8217L324.77 39.8229C325.121 38.405 324.723 36.9067 323.714 35.8523C322.705 34.7978 321.218 34.3393 319.789 34.6394L288.5 41.1831C287.721 41.3473 287.005 41.7243 286.435 42.2746L68.6356 255.647C66.948 257.271 66.8937 259.952 68.5141 261.643L91.995 286.098C92.7734 286.908 93.8444 287.377 94.9673 287.4C96.0907 287.422 97.1766 286.997 97.9871 286.219L153.644 232.774L315.786 72.8438Z\\\" fill=\\\"#CCD1D9\\\"/><path id=\\\"BladeEdge\\\" opacity=\\\"0.2\\\" d=\\\"M323.444 36.0085C322.434 34.9541 320.948 34.4956 319.519 34.7957L303.875 38.0675L288.23 41.3393C287.451 41.5036 286.735 41.8805 286.165 42.4308L68.6356 255.647C66.948 257.271 66.8936 259.952 68.5141 261.643L91.995 286.098C92.7733 286.908 93.8443 287.377 94.9673 287.4C96.0906 287.422 97.1765 286.997 97.9871 286.219L315.517 73C316.087 72.4496 316.492 71.7469 316.688 70.978L324.5 39.9792C324.851 38.5608 324.453 37.0626 323.444 36.0085ZM320.385 38.9425L312.58 69.9414L95.0532 283.161L71.5695 258.705L289.096 45.4893L320.385 38.9425Z\\\" fill=\\\"white\\\"/><path id=\\\"BladeFuller\\\" d=\\\"M80.2529 273.87C78.6324 272.179 78.6867 269.498 80.3743 267.874L196.511 154.854C198.201 153.233 200.883 153.288 202.5 154.975C204.124 156.663 204.069 159.347 202.379 160.968L86.2454 273.991C84.5579 275.609 81.8766 275.555 80.2529 273.87Z\\\" fill=\\\"#AAB2BC\\\"/><g id=\\\"Hilt\\\"><g id=\\\"HandleDeco\\\"><path id=\\\"Handle\\\" d=\\\"M84.2492 285.94C84.272 284.817 83.847 283.728 83.0686 282.918L71.3268 270.69C69.7063 269 67.0219 268.945 65.3343 270.568L26.4448 307.917C24.7573 309.534 24.703 312.216 26.3234 313.906L38.0653 326.134C39.6859 327.818 42.3699 327.872 44.0574 326.255L82.9469 288.907C83.7578 288.129 84.2265 287.064 84.2492 285.94Z\\\" fill=\\\"#ED5564\\\"/><path id=\\\"Stripe1\\\" d=\\\"M42.6711 292.332L78.6222 293.06L82.9473 288.907C83.7578 288.128 84.2265 287.064 84.2492 285.94C84.2579 285.512 84.2012 285.095 84.0881 284.695L51.3175 284.031L42.6711 292.332Z\\\" fill=\\\"#DA4453\\\"/><path id=\\\"Stripe2\\\" d=\\\"M68.9309 302.37L32.9766 301.641L26.4448 307.917C25.8434 308.494 25.453 309.207 25.2673 309.961L60.2845 310.67L68.9309 302.37Z\\\" fill=\\\"#DA4453\\\"/></g><path id=\\\"CrossGuard\\\" d=\\\"M112.785 295.509L59.9487 240.489C58.3282 238.801 55.6469 238.747 53.9594 240.367L44.7874 249.172C43.0997 250.796 43.0454 253.477 44.666 255.161L97.5017 310.183C98.28 310.993 99.3478 311.462 100.471 311.485C101.598 311.508 102.684 311.082 103.494 310.304L112.663 301.499C114.351 299.881 114.405 297.194 112.785 295.509Z\\\" fill=\\\"#FFCE54\\\"/><path id=\\\"Pommel\\\" d=\\\"M45.2373 324.112C45.329 319.587 43.6524 315.295 40.518 312.027C34.0421 305.283 23.2925 305.065 16.5487 311.541C13.2842 314.679 11.4355 318.901 11.3438 323.425C11.2522 327.95 12.9288 332.243 16.0631 335.511C19.2007 338.778 23.4196 340.627 27.9472 340.719C32.4747 340.81 36.7651 339.134 40.0324 335.996C43.2969 332.859 45.1457 328.636 45.2373 324.112Z\\\" fill=\\\"#FFCE54\\\"/><path id=\\\"HiltDetail\\\" d=\\\"M28.2047 328.006C30.5442 328.053 32.4791 326.194 32.5266 323.853C32.574 321.512 30.7159 319.575 28.3765 319.528C26.037 319.481 24.102 321.34 24.0546 323.681C24.0072 326.022 25.8652 327.958 28.2047 328.006Z\\\" fill=\\\"#F6BB42\\\"/></g></g></svg>';\\n        string memory sword4 = '<svg width=\\\"350\\\" height=\\\"350\\\" viewBox=\\\"0 0 350 350\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><g id=\\\"price_sword\\\" clip-path=\\\"url(#clip0_1_3)\\\"><g id=\\\"Flame\\\"><path id=\\\"RedFlame\\\" d=\\\"M47.7706 226.855C53.8773 251.36 58.7885 264.032 74.0941 281.932C80.1197 287.927 84.7004 290.586 95.2061 293.955C100.559 296.497 104.956 297.844 118.747 299.916C133.671 306.768 140.215 305.563 150.682 300.082C139.837 291.79 154.164 281.524 145.376 278.679C136.588 275.833 149.937 259.669 165.256 263.702C168.229 273.729 172.32 276.696 182.195 279.163C191.487 280.999 198.009 280.558 212.387 276.703C229.171 268.196 233.534 259.909 241.247 245.082C229.749 255.096 223.617 258.154 213.61 256.084C203.007 253.901 199.115 250.765 201.358 236.621C207.019 228.463 212.427 230.163 224.16 226.381C235.892 222.598 258.59 206.215 274.276 186.214C280.69 176.612 279.861 173.175 278.273 167.092C269.202 179.626 263.112 184.09 250.515 187.298C238.426 190.086 233.777 188.197 229.036 179.079C216.984 170.313 268.849 149.125 276.575 141.736C284.301 134.346 286.328 120.39 294.416 117.653C302.504 114.915 300.426 95.1918 300.426 95.1918C291.347 107.969 285.503 113.208 273.331 118.074C263.844 123.181 260.619 121.309 256.884 113.413C254.323 109.376 255.523 106.722 262.822 101.237C276.97 89.5209 285.424 84.6622 296.836 63.9696C301.389 50.8049 304.355 36.0035 319.557 16.3949C307.404 18.9857 300.595 22.8031 288.46 34.5893C280.847 42.3589 276.882 48.595 270.252 62.4771C262.274 75.5813 256.952 78.7787 246.052 77.6511C238.049 70.6797 237.061 64.23 245.654 45.2011L227.983 61.1593C220.851 74.7517 220.609 79.9513 222.171 87.9403C214.736 102.401 209.723 105.759 199.714 105.74C186.246 91.1551 186.68 81.9051 196.197 64.2334C189.743 66.0674 186.675 64.8266 175.999 84.095C178.178 102.955 176.302 113.702 165.256 133.288C155.621 136.917 151.189 136.737 146.649 128.725C145.043 108.635 148.175 96.9442 165.835 74.8183C148.483 78.9776 140.152 85.3024 127.008 101.483C116.754 119.835 115.332 129.494 125.739 144.831C108.636 163.168 121.036 171.596 113.227 178.953C113.227 178.953 106.061 187.938 96.5109 180.257C86.961 172.576 92.4042 131.483 101.064 114.03C98.8909 111.423 63.3908 147.232 57.9707 165.782C52.5506 184.332 69.2917 199.674 64.2891 221.231C61.1387 230.085 57.3969 231.065 47.7706 226.855Z\\\" fill=\\\"#E8522A\\\" stroke=\\\"#5E5E5E\\\" stroke-opacity=\\\"0.7\\\"/><path id=\\\"OrangeFlame\\\" d=\\\"M129.659 292.266C109.311 289.104 98.6574 286.046 82.9783 274.935C77.6588 270.484 75.1565 266.961 71.6313 258.681C69.1661 254.522 67.742 251.052 65.0226 240.012C58.3383 228.401 58.824 223.002 62.4851 214.106C70.031 222.3 77.2843 209.921 80.2552 216.845C83.226 223.769 95.3397 211.751 90.9145 199.614C82.5523 197.934 79.8367 194.831 77.0918 186.998C74.9025 179.591 74.77 174.266 76.8168 162.314C82.4578 148.069 88.8551 143.922 100.309 136.576C93.0461 146.641 91.0257 151.841 93.4591 159.811C96.0281 168.257 98.8659 171.186 110.177 168.33C116.372 163.138 114.585 158.873 116.772 149.075C118.959 139.276 130.548 119.654 145.601 105.459C152.911 99.5507 155.763 99.9717 160.819 100.815C151.329 109.095 148.164 114.364 146.508 124.823C145.155 134.839 147.038 138.473 154.795 141.654C162.816 150.793 176.11 107.148 181.526 100.336C186.942 93.5248 198.116 90.8583 199.729 84.0935C201.342 77.3287 217.506 77.5714 217.506 77.5714C207.819 85.8752 204.007 91.0017 200.974 101.237C197.543 109.31 199.305 111.79 205.994 114.244C209.463 116.026 211.527 114.858 215.429 108.533C223.874 96.1924 227.181 88.9757 243.116 78.1984C253.458 73.5396 265.248 70.048 280.018 56.2744C278.83 66.3279 276.244 72.133 267.591 82.8447C261.858 89.5927 257.096 93.2675 246.328 99.6645C236.293 107.099 234.098 111.653 235.833 120.416C242.094 126.401 247.402 126.73 262.2 118.363L250.578 133.873C240.083 140.657 235.881 141.234 229.28 140.552C218.103 147.645 215.755 151.959 216.523 160.081C229.373 169.943 236.848 168.914 250.474 159.896C249.471 165.268 250.709 167.668 235.874 177.743C220.404 177.355 211.823 179.665 196.758 190.064C194.538 198.149 195.017 201.733 201.861 204.831C218.287 204.663 227.54 201.265 244.168 185.313C242.098 199.7 237.592 206.925 225.449 218.778C211.325 228.443 203.593 230.304 190.362 222.981C176.767 238.205 168.994 228.758 163.611 235.635C163.611 235.635 156.858 242.108 163.81 249.297C170.763 256.485 203.704 249.058 217.217 240.752C219.497 242.325 193.106 273.759 178.458 279.516C163.811 285.273 150.099 272.809 132.981 278.448C126.031 281.653 125.518 284.762 129.659 292.266Z\\\" fill=\\\"#EFA63D\\\" stroke=\\\"#5E5E5E\\\" stroke-opacity=\\\"0.7\\\"/><path id=\\\"YellowFlame\\\" d=\\\"M70.6972 244.562C73.9278 257.533 76.5265 264.24 84.6267 273.714C87.8157 276.887 90.2401 278.294 95.8008 280.077C98.6341 281.422 100.961 282.135 108.261 283.23C116.16 286.857 119.624 286.218 125.165 283.316C119.425 278.927 127.009 273.493 122.358 271.987C117.706 270.481 124.773 261.925 132.881 264.058C134.455 269.366 136.62 270.936 141.847 272.241C146.765 273.212 150.217 272.978 157.828 270.936C166.713 266.432 169.022 262.045 173.106 254.196C167.019 259.498 163.774 261.117 158.477 260.022C152.865 258.867 150.805 257.208 151.993 249.72C154.99 245.402 157.853 246.301 164.063 244.298C170.273 242.295 182.289 233.622 190.593 223.033C193.989 217.95 193.55 216.131 192.711 212.911C187.908 219.547 184.684 221.91 178.016 223.609C171.617 225.086 169.156 224.086 166.647 219.26C160.269 214.621 187.723 203.401 191.814 199.489C195.904 195.577 196.977 188.19 201.259 186.74C205.54 185.291 204.441 174.851 204.441 174.851C199.635 181.615 196.541 184.388 190.098 186.965C185.076 189.669 183.369 188.678 181.393 184.499C180.038 182.362 180.673 180.957 184.537 178.053C192.026 171.851 196.502 169.278 202.544 158.324C204.954 151.355 206.526 143.52 214.574 133.14C208.141 134.512 204.537 136.533 198.112 142.773C194.082 146.886 191.983 150.187 188.472 157.536C184.248 164.473 181.431 166.166 175.662 165.57C171.426 161.88 170.904 158.466 175.453 148.393L166.099 156.841C162.323 164.037 162.194 166.789 163.02 171.018C159.084 178.673 156.43 180.451 151.132 180.442C144.005 172.722 144.235 167.826 149.273 158.471C145.857 159.442 144.233 158.786 138.581 168.986C139.733 178.969 138.739 184.657 132.891 195.026C127.791 196.947 125.445 196.852 123.043 192.612C122.194 181.978 123.853 175.789 133.202 164.076C124.017 166.279 119.607 169.627 112.648 178.193C107.219 187.909 106.466 193.021 111.973 201.139C102.919 210.847 109.482 215.307 105.348 219.202C105.348 219.202 101.554 223.958 96.4997 219.893C91.4453 215.828 94.3294 194.076 98.9147 184.837C97.7644 183.457 78.971 202.414 76.1007 212.234C73.2304 222.053 82.0907 230.173 79.4412 241.584C77.7729 246.271 75.7922 246.79 70.6972 244.562Z\\\" fill=\\\"#FBE055\\\" stroke=\\\"#5E5E5E\\\" stroke-opacity=\\\"0.7\\\"/></g><path id=\\\"BladeBase\\\" d=\\\"M315.786 72.8438C316.356 72.2934 316.762 71.5907 316.958 70.8217L324.77 39.8229C325.121 38.405 324.723 36.9067 323.714 35.8523C322.705 34.7978 321.218 34.3393 319.789 34.6394L288.5 41.1831C287.721 41.3473 287.005 41.7243 286.435 42.2746L68.6356 255.647C66.948 257.271 66.8937 259.952 68.5141 261.643L91.995 286.098C92.7734 286.908 93.8444 287.377 94.9673 287.4C96.0907 287.422 97.1766 286.997 97.9871 286.219L153.644 232.774L315.786 72.8438Z\\\" fill=\\\"#D9CCCC\\\"/><path id=\\\"BladeEdge\\\" opacity=\\\"0.2\\\" d=\\\"M323.444 36.0085C322.434 34.9541 320.948 34.4956 319.519 34.7957L303.875 38.0675L288.23 41.3393C287.451 41.5036 286.735 41.8805 286.165 42.4308L68.6356 255.647C66.948 257.271 66.8936 259.952 68.5141 261.643L91.995 286.098C92.7733 286.908 93.8443 287.377 94.9673 287.4C96.0906 287.422 97.1765 286.997 97.9871 286.219L315.517 73C316.087 72.4496 316.492 71.7469 316.688 70.978L324.5 39.9792C324.851 38.5608 324.453 37.0626 323.444 36.0085ZM320.385 38.9425L312.58 69.9414L95.0532 283.161L71.5695 258.705L289.096 45.4893L320.385 38.9425Z\\\" fill=\\\"white\\\"/><path id=\\\"BladeFuller\\\" d=\\\"M80.2529 273.87C78.6324 272.179 78.6867 269.498 80.3743 267.874L196.511 154.854C198.201 153.233 200.883 153.288 202.5 154.975C204.124 156.663 204.069 159.347 202.379 160.968L86.2454 273.991C84.5579 275.609 81.8766 275.555 80.2529 273.87Z\\\" fill=\\\"#BCAAAA\\\"/><g id=\\\"Hilt\\\"><g id=\\\"HandleDeco\\\"><path id=\\\"Handle\\\" d=\\\"M84.2492 285.94C84.272 284.817 83.847 283.728 83.0686 282.918L71.3268 270.69C69.7063 269 67.0219 268.945 65.3343 270.568L26.4448 307.917C24.7573 309.534 24.703 312.216 26.3234 313.906L38.0653 326.134C39.6859 327.818 42.3699 327.872 44.0574 326.255L82.9469 288.907C83.7578 288.129 84.2265 287.064 84.2492 285.94Z\\\" fill=\\\"#ED5564\\\"/><path id=\\\"Stripe1\\\" d=\\\"M42.6711 292.332L78.6222 293.06L82.9473 288.907C83.7578 288.128 84.2265 287.064 84.2492 285.94C84.2579 285.512 84.2012 285.095 84.0881 284.695L51.3175 284.031L42.6711 292.332Z\\\" fill=\\\"#DA4453\\\"/><path id=\\\"Stripe2\\\" d=\\\"M68.9309 302.37L32.9766 301.641L26.4448 307.917C25.8434 308.494 25.453 309.207 25.2673 309.961L60.2845 310.67L68.9309 302.37Z\\\" fill=\\\"#DA4453\\\"/></g><path id=\\\"CrossGuard\\\" d=\\\"M112.785 295.509L59.9487 240.489C58.3282 238.801 55.6469 238.747 53.9594 240.367L44.7874 249.172C43.0997 250.796 43.0454 253.477 44.666 255.161L97.5017 310.183C98.28 310.993 99.3478 311.462 100.471 311.485C101.598 311.508 102.684 311.082 103.494 310.304L112.663 301.499C114.351 299.881 114.405 297.194 112.785 295.509Z\\\" fill=\\\"#FFCE54\\\"/><path id=\\\"Pommel\\\" d=\\\"M45.2373 324.112C45.329 319.587 43.6524 315.295 40.518 312.027C34.0421 305.283 23.2925 305.065 16.5487 311.541C13.2842 314.679 11.4355 318.901 11.3438 323.425C11.2522 327.95 12.9288 332.243 16.0631 335.511C19.2007 338.778 23.4196 340.627 27.9472 340.719C32.4747 340.81 36.7651 339.134 40.0324 335.996C43.2969 332.859 45.1457 328.636 45.2373 324.112Z\\\" fill=\\\"#FFCE54\\\"/><path id=\\\"HiltDetail\\\" d=\\\"M28.2047 328.006C30.5442 328.053 32.4791 326.194 32.5266 323.853C32.574 321.512 30.7159 319.575 28.3765 319.528C26.037 319.481 24.102 321.34 24.0546 323.681C24.0072 326.022 25.8652 327.958 28.2047 328.006Z\\\" fill=\\\"#F6BB42\\\"/></g></g><defs><clipPath id=\\\"clip0_1_3\\\"><rect width=\\\"350\\\" height=\\\"350\\\" fill=\\\"white\\\"/></clipPath></defs></svg>';        \\n        string[3] memory parts;\\n        parts[\\n            0\\n        ] = sword1;\\n        if (value_pct_change > 10) {\\n            parts[\\n                0\\n            ] = sword2;\\n        }\\n        if (value_pct_change > 40) {\\n            parts[\\n                0\\n            ] = sword3;\\n        }\\n        if (value_pct_change > 70) {\\n            parts[\\n                0\\n            ] = sword4;\\n        }                \\n        parts[1] = '';\\n        parts[2] = '';\\n        string memory generatedSVG = string(\\n            abi.encodePacked(parts[0], parts[1], parts[2])\\n        );\\n        return generatedSVG;\\n    }\\n}\\n\\ncontract Nft is ERC721, Ownable {\\n    uint256 public tokenCounter;\\n    using SwordMaker for string;\\n    \\n    AggregatorV3Interface internal priceFeed;\\n    mapping(uint256 => int256) public tokenIdToValue;\\n\\n    constructor(address _priceFeedAddress) ERC721(\\\"Price NFT\\\", \\\"PNFT\\\") {\\n        priceFeed = AggregatorV3Interface(_priceFeedAddress);\\n    }\\n\\n    function create() public {\\n        (, int256 creationValue, , , ) = priceFeed.latestRoundData();\\n        tokenIdToValue[tokenCounter] = creationValue;\\n        _safeMint(msg.sender, tokenCounter);\\n        tokenCounter = tokenCounter + 1;\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        // generate SVG from price\\n        (, int256 currentValue, , , ) = priceFeed.latestRoundData();\\n        int256 creationValue = tokenIdToValue[tokenId];\\n        int256 value_pct_change = (currentValue - creationValue) / creationValue;\\n\\n        // ****** call_Library_to_get generatedSVG\\n        string memory generatedSVG = SwordMaker.generateSVGFromPrice(value_pct_change);\\n\\n        // SVG to ImageURI\\n        string memory imageURI = svgToImageURI(generatedSVG);\\n        // Format TokenURI\\n        return formatTokenURI(imageURI);\\n    }\\n\\n    function svgToImageURI(string memory svg)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        string memory baseURL = \\\"data:image/svg+xml;base64,\\\";\\n        string memory svgBase64Encoded = Base64.encode(bytes(svg));\\n        return string(abi.encodePacked(baseURL, svgBase64Encoded));\\n    }\\n\\n    function formatTokenURI(string memory imageURI)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\":\\\"',\\n                                \\\"Price Feed NFT\\\",\\n                                '\\\", \\\"description\\\":\\\"\\\", \\\"attributes\\\":\\\"\\\", \\\"image\\\":\\\"',\\n                                imageURI,\\n                                '\\\"}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT license\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\",\"keccak256\":\"0xf643c55c44ecf032c319ba87c783b147ab9e5d67686bf627f127dbcf7d55adfa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c806371aee193116100b8578063ba84a4c41161007c578063ba84a4c41461034c578063c87b56dd1461037c578063d082e381146103ac578063e985e9c5146103ca578063efc81a8c146103fa578063f2fde38b1461040457610137565b806371aee193146102a85780638da5cb5b146102d857806395d89b41146102f6578063a22cb46514610314578063b88d4fde1461033057610137565b806330d871c6116100ff57806330d871c6146101f257806342842e0e146102225780636352211e1461023e57806370a082311461026e578063715018a61461029e57610137565b806301ffc9a71461013c57806306fdde031461016c578063081812fc1461018a578063095ea7b3146101ba57806323b872dd146101d6575b600080fd5b61015660048036038101906101519190611d01565b610420565b6040516101639190611d49565b60405180910390f35b610174610502565b6040516101819190611dfd565b60405180910390f35b6101a4600480360381019061019f9190611e55565b610594565b6040516101b19190611ec3565b60405180910390f35b6101d460048036038101906101cf9190611f0a565b610619565b005b6101f060048036038101906101eb9190611f4a565b610731565b005b61020c600480360381019061020791906120d2565b610791565b6040516102199190611dfd565b60405180910390f35b61023c60048036038101906102379190611f4a565b610805565b005b61025860048036038101906102539190611e55565b610825565b6040516102659190611ec3565b60405180910390f35b6102886004803603810190610283919061211b565b6108d7565b6040516102959190612157565b60405180910390f35b6102a661098f565b005b6102c260048036038101906102bd91906120d2565b610a17565b6040516102cf9190611dfd565b60405180910390f35b6102e0610a67565b6040516102ed9190611ec3565b60405180910390f35b6102fe610a91565b60405161030b9190611dfd565b60405180910390f35b61032e6004803603810190610329919061219e565b610b23565b005b61034a6004803603810190610345919061227f565b610b39565b005b61036660048036038101906103619190611e55565b610b9b565b604051610373919061231b565b60405180910390f35b61039660048036038101906103919190611e55565b610bb3565b6040516103a39190611dfd565b60405180910390f35b6103b4610d6c565b6040516103c19190612157565b60405180910390f35b6103e460048036038101906103df9190612336565b610d72565b6040516103f19190611d49565b60405180910390f35b610402610e06565b005b61041e6004803603810190610419919061211b565b610edd565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104eb57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104fb57506104fa82610fd5565b5b9050919050565b606060008054610511906123a5565b80601f016020809104026020016040519081016040528092919081815260200182805461053d906123a5565b801561058a5780601f1061055f5761010080835404028352916020019161058a565b820191906000526020600020905b81548152906001019060200180831161056d57829003601f168201915b5050505050905090565b600061059f8261103f565b6105de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d590612449565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061062482610825565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610695576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068c906124db565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106b46110ab565b73ffffffffffffffffffffffffffffffffffffffff1614806106e357506106e2816106dd6110ab565b610d72565b5b610722576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107199061256d565b60405180910390fd5b61072c83836110b3565b505050565b61074261073c6110ab565b8261116c565b610781576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610778906125ff565b60405180910390fd5b61078c83838361124a565b505050565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000815250905060006107d8846114a6565b905081816040516020016107ed92919061265b565b60405160208183030381529060405292505050919050565b61082083838360405180602001604052806000815250610b39565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c5906126f1565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093f90612783565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109976110ab565b73ffffffffffffffffffffffffffffffffffffffff166109b5610a67565b73ffffffffffffffffffffffffffffffffffffffff1614610a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a02906127ef565b60405180910390fd5b610a15600061161f565b565b6060610a4182604051602001610a2d9190612965565b6040516020818303038152906040526114a6565b604051602001610a5191906129f4565b6040516020818303038152906040529050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610aa0906123a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610acc906123a5565b8015610b195780601f10610aee57610100808354040283529160200191610b19565b820191906000526020600020905b815481529060010190602001808311610afc57829003601f168201915b5050505050905090565b610b35610b2e6110ab565b83836116e5565b5050565b610b4a610b446110ab565b8361116c565b610b89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b80906125ff565b60405180910390fd5b610b9584848484611852565b50505050565b60096020528060005260406000206000915090505481565b6060610bbe8261103f565b610bfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf490612a88565b60405180910390fd5b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c909190612b2b565b5050509150506000600960008581526020019081526020016000205490506000818284610cbd9190612bd5565b610cc79190612c98565b9050600073__$12c180a4b646ab3944f6b6d6dd47beb74f$",
  "libraries": {
    "SwordMaker": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 176,
        "contract": "contracts/price_nft.sol:Nft",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 178,
        "contract": "contracts/price_nft.sol:Nft",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 182,
        "contract": "contracts/price_nft.sol:Nft",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 186,
        "contract": "contracts/price_nft.sol:Nft",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 190,
        "contract": "contracts/price_nft.sol:Nft",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 196,
        "contract": "contracts/price_nft.sol:Nft",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 53,
        "contract": "contracts/price_nft.sol:Nft",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1930,
        "contract": "contracts/price_nft.sol:Nft",
        "label": "tokenCounter",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1936,
        "contract": "contracts/price_nft.sol:Nft",
        "label": "priceFeed",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 1940,
        "contract": "contracts/price_nft.sol:Nft",
        "label": "tokenIdToValue",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_int256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}